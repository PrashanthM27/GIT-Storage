global class FCST_ActualCopyBatch implements Database.Batchable<sObject>,Database.stateful {
    global Set<Id> setFailedAccounts = new Set<Id>();
    global String Query;
    map<Id,Id> mapVersionChange;
    global Set<Actual_Model__c> ActualModelList = new Set<Actual_Model__c>();
    global FCST_ActualCopyBatch(map<Id,Id> mv){
        mapVersionChange = mv;
        set<Id> setVersions = new set<Id>();
        setVersions = mapVersionChange.keyset();
       
        Query = 'SELECT Account__c,Revenue_Type__c,GEO_Description__c,Revenue_Stream__c,FCST_Contract__c,CC_Description__c,BSLA__c,Actual_Amount__c,FCST_Planning_Version__c,FCST_Planning_Version__r.name,Opportunity__r.AccountId,Fiscal_Period__c,';
        Query += 'Fiscal_Year__c,Opportunity__c,Contract_LineItem__c,FCST_GEO__c,FCST_CC__c from Actual_Model__c where FCST_Planning_Version__c IN: setVersions';

    }

     global Database.QueryLocator start(Database.BatchableContext BC){
     
        set<Id> setVersions = new set<Id>();
        setVersions = mapVersionChange.keyset();
        return Database.getQueryLocator(query);
     }
     global void execute(Database.BatchableContext BC, List<Actual_Model__c> scope){
          if(scope.size()>0){
            map<Id,Planning_Version__c> mapVersionChangev2 = new map<Id,Planning_Version__c>();
            set<Id> setModelVersion = new set<Id>();
            for(Actual_Model__c m: scope){
                setModelVersion.add(m.FCST_Planning_Version__c);
            }
            for(Planning_Version__c v : [select Id,Name,Previous_Version__c,Data_Entry_Closed_Date__c from Planning_Version__c where  Previous_Version__c IN: setModelVersion]){
                mapVersionChangev2.put(v.Previous_Version__c,v);
            }
               string cYear = string.valueOf(system.today().Year());            
            
            List<Actual_Model__c > lstModels = new List<Actual_Model__c >();
            List<Actual_Model__c > lstProcessModels = new List<Actual_Model__c >();
            
            set<string> processKeys = new set<string>();
            
              for(Actual_Model__c m :scope){
                        Id newVersion = mapVersionChangev2.get(m.FCST_Planning_Version__c).id;
                        string Key = LEFT15Digit(m.Account__c)+'#'+LEFT15Digit(m.Fiscal_Period__c)+'#'+LEFT15Digit(newVersion)+'#'+LEFT15Digit(m.Contract_LineItem__c);
                        processKeys.add(key);
                        lstProcessModels.add(m);
            }
            map<string,Actual_Model__c> mapExistingModel = new map<string,Actual_Model__c>();
            for(Actual_Model__c m :[SELECT Account__c,Revenue_Type__c,Revenue_Stream__c,GEO_Description__c,FCST_Contract__c,CC_Description__c,
                                    BSLA__c,Actual_Amount__c,Contract_LineItem__c,FCST_Planning_Version__c,FCST_Planning_Version__r.name,
                                    Comments__c,Fiscal_Period__c,Fiscal_Year__c,Opportunity__c,Opportunity__r.AccountId,Model_Name__c,
                                    FCST_GEO__c,FCST_CC__c from Actual_Model__c where Model_Name__c IN: processKeys order by Opportunity__r.AccountId]){
                mapExistingModel.put(m.Model_Name__c,m);
            }
          for(Actual_Model__c m :lstProcessModels){
                
                Id newVersion = mapVersionChangev2.get(m.FCST_Planning_Version__c).id;
                string Key = LEFT15Digit(m.Account__c)+'#'+LEFT15Digit(m.Fiscal_Period__c)+'#'+LEFT15Digit(newVersion)+'#'+LEFT15Digit(m.Contract_LineItem__c);
                
                
                Actual_Model__c newModel;
                if(mapExistingModel.containsKey(key)){ 
                    newModel = mapExistingModel.get(key); 
                    newModel.Comments__c = 'Updated by copy from '+m.FCST_Planning_Version__r.Name; 
                    }else {
                    newModel = new Actual_Model__c ();
                    newModel.Comments__c = 'generated by copy from '+m.FCST_Planning_Version__r.Name;
                    newModel.Opportunity__c = m.Opportunity__c;
                }
                    
                newModel.Actual_Amount__c = m.Actual_Amount__c;
                newModel.FCST_Planning_Version__c = newVersion;        
                newModel.Fiscal_Period__c = m.Fiscal_Period__c;
               // newModel.Product__c = m.Product__c;
                newModel.Account__c= m.Account__c;  
                newModel.Fiscal_Year__c = m.Fiscal_Year__c;
                newModel.Contract_LineItem__c = m.Contract_LineItem__c;
               // newModel.Actual_Type__c = m.Actual_Type__c;
                newModel.BSLA__c = m.BSLA__c;
              //  newModel.CC__c = m.CC__c;
                newModel.CC_Description__c = m.CC_Description__c;
              //  newModel.CDR__c = m.CDR__c;
              //  newModel.CDR_Description__c = m.CDR_Description__c;
                newModel.FCST_Contract__c = m.FCST_Contract__c;
              //  newModel.GEO__c = m.GEO__c;
                newModel.GEO_Description__c = m.GEO_Description__c;
                newModel.Revenue_Stream__c = m.Revenue_Stream__c;
                newModel.Revenue_Type__c = m.Revenue_Type__c;
              	newModel.FCST_GEO__c=m.FCST_GEO__c;
              	newModel.FCST_CC__c=m.FCST_CC__c;
 
                lstModels.add(newModel);
                                              
                  
            }
             if(lstModels != null && lstModels.size()>0){ 
             Database.UpsertResult[] srList = Database.upsert(lstModels, false);
             for(Integer i=0;i<srList.size();i++){
                  if(!srList.get(i).isSuccess()){                     
                     ActualModelList.add(lstModels.get(i)); 
                  }
                 
              }
        }
            
          }
     
     }
    public string LEFT15Digit(string str){
        if(str <> null && str <> '' && str.length() > 15){
            str = str.substring(0,15);
        }
        return str;
    }
    global void finish(Database.BatchableContext BC){
      sendMailToAdmin();
    }
    global void sendMailToAdmin(){
        List<Fcst_Batch_Status__c> lstAllAdmins = Fcst_Batch_Status__c.getAll().values();
        List<id> lstUserIds = new List<String>();
        for(Fcst_Batch_Status__c getRec:lstAllAdmins){
           lstUserIds.add(getRec.User_Id__c ); 
        }

        if(ActualModelList != null && ActualModelList.size()>0){
             String strBody = '';
                strBody = 'Please find attachement for Actual error records';
                 String finalstr =  'Id,Comments__c, Opportunity__c, Actual_Amount__c,FCST_Planning_Version__c,Fiscal_Year__c,Fiscal_Period__c,Account__c,Fiscal_Year__c,Contract_LineItem__c,BSLA__c,CC_Description__c,FCST_Contract__c,GEO_Description__c,Revenue_Stream__c,Revenue_Type__c,FCST_GEO__c,FCST_CC__c\n';
                for(Actual_Model__c a : ActualModelList){
                    string recordString = a.id+',' +a.Comments__c+ ','+a.Opportunity__c+',' +a.Actual_Amount__c+',' +a.FCST_Planning_Version__c+',' +a.Fiscal_Year__c+',' +a.Fiscal_Period__c+',' +a.Account__c+',' +a.Fiscal_Year__c+',' +a.Contract_LineItem__c+',' +a.BSLA__c+',' +a.CC_Description__c+',' +a.FCST_Contract__c+',' +a.GEO_Description__c+',' +a.Revenue_Stream__c+',' +a.Revenue_Type__c+',' +a.FCST_GEO__c+',' +a.FCST_CC__c+'\n';
                    finalstr = finalstr +recordString; 
                }
                sendErrorTemplate(lstUserIds,strBody,finalstr);

        }
          
     }
     public void sendErrorTemplate(List<Id> lstUserIds, String strMessage,String finalstr){
       Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
          
            mail.setToAddresses(lstUserIds);
            mail.subject = 'Actual Errro records | '+DateTime.now();
            mail.setPlainTextBody(strMessage);
                 Messaging.EmailFileAttachment attach = new Messaging.EmailFileAttachment();
                    attach.setBody(Blob.valueOf(finalstr));
                    attach.setFileName('ErrorFile.csv');
                    mail.setFileAttachments(new Messaging.EmailFileAttachment[]{attach});
        // Send the email you have created.
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });

    }
}